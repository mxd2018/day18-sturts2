<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">

<!-- 注意：struts里面配置了action，但没有具体的action类的时候tomcat是启动不了的 -->
<struts>
	<!-- struts的常量,会覆盖default.properties中的常量值 -->
	<!--开发模式,debug不需要重启服务器  -->
	<constant name="struts.devMode" value="true"></constant>
	<!--解决中文乱码   编码 internationalization-->
	<constant name="struts.i18n.encoding" value="utf-8"></constant>
	<!-- action的访问扩展名 -->
	<constant name="struts.action.extension" value="action,do,html,,"></constant>
	<!-- 开启动态方法访问 -->
	<constant name="struts.enable.DynamicMethodInvocation" value="true"></constant>
	<!-- 全局文件上传字节数限制 -->
	<constant name="struts.multipart.maxSize" value="200000"></constant>
	<!-- 国际化 -->
	<!-- 注意：propertise文件不要放直接src下，也不要在每个资源文件前都加res/
			 因为，不然它会认为这几个文件是并列的，最后一个文件会覆盖先前的文件
	 -->
	<constant
		name="struts.custom.i18n.resources" 
		value="res/i18n,i18n_en_US,i18n_zh_CN">
	</constant>
	
	<!-- 注意：1.如果是ajax传递json数据，extends就不能=struts-default，应该是json-default，该包里面除了json包外还继承了struts-default	 -->
	<package name="default" namespace="/" extends="json-default">
		
		<!-- ajax请求，返回属性值到ajax请求 -->
		<action name="ajax" class="action.AjaxAction">
			<result name="success" type="json">
				<!-- 将属性数据以json格式返回给ajax请求 
					  注意：1. 当需要多个属性类型的数据时，使用逗号隔开即可
					  	2.也可以带对象到前端，user.*的方式即可，即带过去user对象的所有属性
				-->
				<param name="includeProperties">username,flag</param>
			</result>
		</action>
		
		<!-- token令牌
			注意:
			1.token令牌的作用是：解决页面提交后返回，再点提交还能反复提交的问题。当有人不停的反复提交时，就会增加服务器压力
			2.token标签其实是一个隐藏的input，当页面刷新后，会产生一个类似于ID的属性，刷新后放于session中，当请求成功后删除该session中的id，
		                   那么当重复提交时，找不到相同的id就视为反复提交，提交无效。该过程在拦截器中完成
		 	3.这里的invalid.token是固定的，无效的token
		 -->
		<action name="token" class="action.TokenAction">
			<result>/index.jsp</result>
			<result name="invalid.token">/error.jsp</result>
			
			<interceptor-ref name="defaultStack"></interceptor-ref>
			<!-- 引入令牌拦截器，判断是不是重复提交， 如果是将会返回invalid.token的视图-->
			<interceptor-ref name="token"></interceptor-ref>
		</action>
		
		<!-- 参数绑定，自定义传参时date转换格式 -->
		<!-- 注意:
			 1.想要自定义转化date格式，
			 	1）需要自己编写converter转换类，并继承默认转化类DefaultTypeConverter，重写convertValue()方法
			 	2）使用propertise文件来找到上述自定义的转换类，因为其它地方不需要配置什么，所以该文件的命名肯定有要求
			 	3）如果要让所有的日期类型都经过自定义的转化，就需要定义一个全局的properties文件，命名为xwork-conversion.properties,Action内部命名为Aciton类名-conversion.properties
			 		全局配置：意思是所有的Date都经过自定义的日期转换类
			 			java.util.Date=converter.MyDateConverter
			 		某个Action内部的Date属性配置：意思是将Action中想要获得的某个前端Date参数经过自定义的日期转换类
			 			date=converter.MyDateConverter
			 	4）全局和Action内部的配置文件不要同时出现？？？、		
			 	
		 -->
		<action name="date" class="action.DateAction">
			<result>/index.jsp</result>
			<result name="input">/error2.jsp</result>
		</action>
		
	</package>
</struts>
